---
title: Indicator Expansion

format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    self-contained: true
    embed-resoures: true
    smooth-scroll: true
execute:
  include: true
  echo: true
  warning: false
  message: false
  eval: true
  results: "asis"
  out.width: "100%"
  code-fold: true
editor: visual
project:
  execute-dir: project
---

## Intro

```{r}

aoi_adm1 <- c(
  "Takhar",
  "Badakhshan",
  "Badghis",
  "Sar-e-Pul" ,
  "Faryab"
  )
```

```{r}
SEASON_OF_INTEREST <- c(3,4,5)
LATEST_SEASON_PREDICTABLE <-  c(3,4)

box::use(
  ../R/blob_connect,
  ../R/utils[download_fieldmaps_sf],
  loaders = ../R/load_funcs
)
box::reload(loaders)
box::use(
  dplyr[...],
  forcats[...],
  ggplot2[...],
  gt[...],
  stringr[...],
  tidyr[...],
  lubridate[...],
  purrr[...],
  ggiraph[...],
  gghdx[...],
  ggh4x[...],
  glue[...],
  DBI,
  RPostgres,
  janitor[clean_names],

  readr,
  scales,
  stats

)
gghdx()
```

```{r}
con <- DBI$dbConnect(
  drv = RPostgres$Postgres(),
  user = Sys.getenv("AZURE_DB_USER_ADMIN"),
  host = Sys.getenv("AZURE_PROD_DB_HOST"),
  password = Sys.getenv("AZURE_PROD_DB_PW"),
  port = 5432,
  dbname = "postgres"
)

df_adm1_labels <- tbl(con,"polygon") |>
  filter(
    iso3 == "AFG",
    adm_level == 1
  ) |>
  select(
    iso3, pcode, name
  ) |>
  collect()

aoi_pcodes <- df_adm1_labels |>
  filter(
    name %in% aoi_adm1
  ) |>
  pull(pcode)

df_seas5 <- tbl(con, "seas5") |>
  filter(
    iso3 == "AFG",
    adm_level ==1,
    pcode %in% aoi_pcodes
  ) |>
  collect() |>
  mutate(
    precipitation = mean *days_in_month(valid_date)
  )



df_seas5_filt <- df_seas5 |>
  filter(
    issued_date>= "1981-06-01"
  )

aggregate_forecast <-  function(df,valid_months){
  df |>
    group_by(iso3, pcode,issued_date) |>
     # group_by(issued_date) %>%
    filter(
      # all(valid_months %in% month(valid_date))&
      month(valid_date) %in% valid_months,
      all(valid_months %in% month(valid_date))

    ) |>
    summarise(
      mm = sum(precipitation),
      # **min() - BECAUSE**  for MJJA (5,6,7,8) at each pub_date we have a set of leadtimes
      # for EXAMPLE in March we have the following leadtimes 2
      # 2 : March + 2 = May,
      # 3 : March + 3 = June,
      # 4 : March + 4 = July
      # 5:  March + 5 = Aug
      # Therefore when we sum those leadtime precip values we take min() of lt integer so we get the leadtime to first month being aggregated
      leadtime = min(leadtime),
      .groups = "drop"
    ) |>
    arrange(issued_date)
}

df_seas5_mam <- aggregate_forecast(
  df_seas5_filt,
  valid_months = SEASON_OF_INTEREST
  )

df_seas5_rps_historical <- df_seas5_mam |>
  mutate(
    pub_mo = month(issued_date,label =T, abbr=T)
  ) |>
  group_by(iso3, pcode, pub_mo, leadtime) |>
  arrange(
    pcode,pub_mo,mm
  ) |>
  mutate(
    rank = row_number(),
    q_rank = rank/(max(rank)+1),
    rp_emp = 1/q_rank,

  ) |>
  arrange(pcode,pub_mo,mm)

```

```{r}
#| eval: true
#| echo: true
#| warnings: false
#| message: false

df_environmental <- loaders$load_all_environmental_data()

df_environmental <- df_environmental |>
  mutate(
    yr_date = case_when(
      str_detect(parameter,"Dec|Nov")~yr_date + years(1),
      .default = yr_date
    )
  )

df_valid_range <- df_environmental |>
  filter(
    str_detect(parameter,"^asi|^vhi")
  ) |>
  pull(yr_date) |>
  range()



df_env_filt <- df_environmental |>
  filter(
    yr_date >= df_valid_range[1],
    yr_date <= df_valid_range[2],
    adm1_name %in% aoi_adm1
    # adm1_name == "Faryab"
  ) |>
  group_by(
    adm1_code,
    adm1_name,
    parameter
  ) |>
  arrange(
    desc(value),
    .by_group = TRUE
  ) |>
  mutate(
    rank = row_number(),
    q_rank = rank/(max(rank)+1),
    rp_max_direction = 1/q_rank
  ) |>
  arrange(
    value,.by_group = TRUE
  ) |>
  mutate(
    rank = row_number(),
    q_rank = rank/(max(rank)+1),
    rp_min_direction = 1/q_rank,

  ) |>
  ungroup() |>
  mutate(
    rp_relevant_direction  = case_when(
      str_detect(parameter,"asi|temp")~ rp_max_direction,
      .default = rp_min_direction,

    )
  )


df_seas5_ready <- df_seas5_rps_historical |>
  mutate(
    yr_date = floor_date(issued_date+months(leadtime),"year"),
    parameter = paste0("seas5_mam_pub_",pub_mo)
  ) |>
  left_join(
    df_adm1_labels
  ) |>
  rename(
    rp_relevant_direction = rp_emp,
    value = mm,
    adm1_name = name
  ) |>
  filter(
    adm1_name %in% aoi_adm1
    # adm1_name =="Faryab"
    )
```

```{r}
df_env_filt_flag <- bind_rows(
  df_env_filt ,
  df_seas5_ready |> ungroup()
  ) |>
  group_by(
    adm1_name,parameter
  ) |>
  mutate(
    flag = rp_relevant_direction>=5
  )


df_valid_flag <- df_env_filt_flag |>
  filter(
    str_detect(parameter,"asi_May")
  ) |>
  rename(
    valid_flag = flag
  )


df_env_compare <- df_env_filt_flag |>
  left_join(
    df_valid_flag |>
      ungroup() |>
      select(
        yr_date,
        # adm1_code,
        adm1_name,
        valid_flag)
  ) |>
  mutate(
    prediction = (flag &valid_flag)|(!flag & !valid_flag)
  )


df_pct_correct <- df_env_compare |>
  filter(
    yr_date >= df_valid_range[1],
    yr_date <= df_valid_range[2],
  ) |>

  group_by(
    adm1_name, parameter
  ) |>
  summarise(
    precision = sum(flag & valid_flag)/ sum(flag),
    recall = sum(flag & valid_flag)/ sum(valid_flag),
    accuracy = mean(prediction),
    .groups="drop_last"
  ) |>
  mutate(
    rank_correct= dense_rank(accuracy)
  )
```

```{r}
aoi_adm1 <- set_names(aoi_adm1,aoi_adm1)
mo_rgx <- glue_collapse(glue("{month(1:12,abbr=T,label=T)}$"),sep = "|")

p_metrics_seasonal <-
   aoi_adm1 |>
  map(\(adm_tmp){
  df_pct_correct |>
  ungroup() |>
      filter(
        adm1_name == adm_tmp
      ) |>
  filter(!(parameter%in% c("chirps_cumuDec"))) |>
  mutate(
    mo_monitored_chr = case_when(
      str_detect(parameter, "mam$|mam_sum$|mam_mean$")~"May",
      .default = str_extract(parameter,pattern= mo_rgx)
    ),
    mo_monitored = factor(mo_monitored_chr, levels = month.abb, ordered = TRUE),
    mo_monitored_dummy = as_date(glue("2000-{mo_monitored}-01")),

    mo_pub = case_when(
      str_detect(parameter, "seas5")~ mo_monitored,
      .default = month(mo_monitored_dummy + months(1),label = T, abbr= T)
    ),
    trigger_type = factor(case_when(
      mo_pub %in% c("Jan","Feb","Mar")~"Pre-Season",
      mo_pub %in% c("Mar","Apr","May")~"Mid-Season",
      mo_pub %in% c("Jun","Jul")~"Post-Season"
      ), levels = c("Pre-Season","Mid-Season","Post-Season")
    )
  ) |>
  # filter(str_detect(parameter,"seas5"))
   pivot_longer(cols = precision:accuracy) |>
  filter(
    !(mo_monitored %in% c("Nov","Oct","Sep","Aug","Jul")),
    !(mo_pub %in%c("Dec"))
  ) |>
  ggplot(
    aes(
       y = reorder(parameter,value),
      x= value,
      color = name
      )
  )+
  geom_point_interactive(
    aes(tooltip= glue(
      "parameter: {parameter},
      metric: {name}
      value: {scales::label_percent(accuracy = 1)(value)}")
    ),alpha=0.4
  )+
  facet_nested(
    rows=vars(trigger_type, mo_pub),
    # nest_line = element_line(colour = "red"),
    scales="free")+

  scale_x_continuous(labels =scales::label_percent())+
      scale_y_discrete(expand= c(.05,.05))+
  labs(
    title =  "How well do RS parameters (thresholded - 5 year RP) predict cumulative May ASI breaching 5 year RP",
    subtitle =glue("{adm_tmp} Province")

    )+
    theme(
      # strip.text = element_text(angle=90),
      ggh4x.axis.nestline = element_line(linetype = 2),
      panel.border = element_rect(fill=NA, color ="grey"),
    legend.title = element_blank(),
    axis.text.y= element_text(size=6),
    axis.title.x= element_blank(),
    axis.title.y= element_blank(),
    plot.title = element_text(size =9),
    plot.subtitle = element_text(size =8),strip.background = element_rect(fill="lightgrey")
  )
  }
  )
```

## Indicator Performance by Trigger/Framework Stage

-   Below the we look at measured indicators performance. How well does a 5 year RP or greater event measured across each indicator perform in predicting a 5 year RP ASI drought level as measured at the end of March.
    -   The indicators are broken up into 3 major categories (`pre-season`, `mid-season`, `post-season`), based on when each indicator/trigger moment will become available. Note the months represented in the strips on right represent the month the data will be available. Therefore, they are typically put as 1 month after the date the indicator is monitoring. For example NDVI for March will be fully available in April. This is true for all indicators except for the seasonal forecast (`seas5`) where a forecast for the current month is provided at the start of the month the data is published (5th of month)

**Quick Initial Takeaways:**

-   All indicators pre-season indicators perform weakly in January across all admin units

-   `SEAS5` (seasonal forecast) is the best pre-season indicator that we have the earliest in `Feb` in most provinces

-   More indicators become better predictors in March (labelled as pre-season, but not really sufficient leadtime for agricultural activities and operational leadtimes received).

-   In March SEAS5 prediction for MAM is still the most predictive preciptiation indicator we have.

-   By March/April, soil moisture looks very promising as well as other combinations with snow indicators and precipitation

-   From April onwards observed precipitation becomes more predictive. With CHIRPS leading over ERA5 by a usually a minor except in Bagdhis where ERA5 is much more performant.

### Interpreting plots:

TBD - explain why accuracy is less important than it sounds/looks due to class imbalance

-   Accuracy
-   Precision
-   Recall

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$Faryab)
```

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$Badghis)
```

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$`Sar-e-Pul`)
```

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$Takhar)
```

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$Badakhshan)
```

```{r}
lp_metric <-
  aoi_adm1 |>
  map(\(adm_tmp){

    df_pct_correct |>
      filter(adm1_name == adm_tmp) |>
      pivot_longer(cols = precision:accuracy
      ) |>
      ggplot(
        aes(
          x=reorder(parameter,value),
          y= value,
          color = name)
      )+
      geom_point_interactive(
        aes(tooltip= glue(
          "parameter: {parameter},
      metric: {name}
      value: {scales::label_percent(accuracy = 1)(value)}")
        ),alpha=0.4
      )+
      coord_flip()+
      scale_y_continuous(labels =scales::label_percent())+
      labs(
        title =  "How well do RS parameters (thresholded - 5 year RP) predict cumulative May ASI breaching 5 year RP",
        subtitle =glue("{adm_tmp} Province")

      )+
      theme(
        legend.title = element_blank(),
        axis.text.y= element_text(size=6),
        axis.title.x= element_blank(),
        axis.title.y= element_blank(),
        plot.title = element_text(size =9),
        plot.subtitle = element_text(size =8)
      )
  }
  )

girafe(ggobj = lp_metric$Badghis)
```

```{r}
#| eval: false

lp_tile <- aoi_adm1 |>
  map(
    \(adm_tmp){
      df_env_filt |>
        filter(adm1_name == adm_tmp) |>
      arrange(
        parameter,adm1_name,yr_date
      ) |>
        mutate (
          yr = year(yr_date),
          rp_bin = cut(rp_relevant_direction,
                       breaks = c(1, 2, 3, 4, 5, Inf),
                       labels = c("1-2", "2-3", "3-4", "4-5", ">=5"),
                       include.lowest = TRUE)
        ) |>
        ggplot(
          aes(x = yr_date, y = parameter, fill = rp_bin)
        )+
        geom_tile_interactive(aes(
          tooltip = glue(
            "year: {yr}
      parameter: {parameter}
      value: {value},
      RP: {rp_relevant_direction}
      "
          )
        ))+
        labs(title = adm_tmp)+
        scale_fill_manual(
          values = c(
            "1-2" = "#d4efdf",   # Light green (low severity)
            "2-3" = "#f7dc6f",   # Yellow (moderate severity)
            "3-4" = "#f5b041",   # Orange (high severity)
            "4-5" = "#e74c3c",   # Red (severe drought)
            ">=5" = "#943126"    # Dark red (extreme drought)
          )
        )+
        # facet_wrap(~!!sym(adm_tmp) ,ncol = 1)+
        theme(
          axis.text.y= element_text(size=5)
        )
    }
  )


girafe(ggobj = lp_tile[[2]])
```

## Suggested Next Steps:
