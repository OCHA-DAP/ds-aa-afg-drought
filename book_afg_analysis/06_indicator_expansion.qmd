---
title: Indicator Expansion

format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    self-contained: true
    embed-resoures: true
    smooth-scroll: true
execute:
  include: true
  echo: true
  warning: false
  message: false
  eval: true
  results: "asis"
  out.width: "100%"
  code-fold: true
editor: visual
project:
  execute-dir: project
---

## Intro

```{r}

aoi_adm1 <- c(
  "Takhar",
  # "Badakhshan",
  # "Badghis",
  "Sar-e-Pul" ,
  "Faryab"
  )

box::use(
  ../R/blob_connect,
  ../R/utils,
  seas5 = ../R/seas5_utils,
  loaders = ../R/load_funcs
)

# not using box as it doesn't play nice w/ meta pacakges like `{tidymodels}`
# in refactoring I should probably just laod this specific packages necessary
# for tidymodels and ultimately move all the heavy tidymodels work to a new
# notebook

library(tidyverse)
library(cumulus)
library(gt)
library(gghdx)
library(glue)
library(janitor)
library(ggiraph)
library(ggh4x)
library(ggrepel)
library(sf)
library(tidymodels)
library(vip)
gghdx()
```

```{r}

label_parameters <- function(df){
  df |>
    mutate(
     parameter_label = case_when(
      str_detect(parameter, "era5_land_volumetric_soil")~ "Soil Moisture (ERA5)",
      str_detect(parameter,"NDSI")~"NDSI",
      str_detect(parameter,"asi")~"ASI",
      str_detect(parameter,"vhi")~"VHI",
      str_detect(parameter,"cumu_chirps_precipitation_sum")~"Precip cumu (CHIRPS) ",
      str_detect(parameter,"chirps_precipitation_sum")~"Precip (CHIRPS)",
      str_detect(parameter,"cumu_era5_land_total_precipitation_sum")~"Precip cumu (ERA)",
      str_detect(parameter,"era5_land_total_precipitation_sum")~"Precip (ERA)",
      str_detect(parameter,"mean_2m_air_temperature")~"Temp (ERA)",
      str_detect(parameter,"era5_land_snow_depth_water_equivalent")~"SDWE (ERA5)",
      str_detect(parameter,"era5_land_snow_cover")~"Snow Cover (ERA5)",
      str_detect(parameter,"era5_land_snowmelt_sum")~"Snow Melt (ERA5)",
      str_detect(parameter,"runoff_max")~"Runoff max (ERA5)",
      str_detect(parameter,"runoff_sum")~"Runoff sum (ERA5)",
      str_detect(parameter,"SWE_inst")~"SWE (FLDAS)",
      str_detect(parameter,"mam_mixed_seas_observed")~"Mixed forecast & obs -MAM",
      .default = parameter
    )
    )
}




```

```{r}
box::reload(loaders)

df_compiled_indicators <- loaders$load_compiled_indicators(aoi_adm1 = aoi_adm1)

df_indicators_flagged <- df_compiled_indicators |>
  mutate(
    flag = rp_relevant_direction>=3
  )
# df_indicators_flagged <- df_compiled_indicators_w_mixed |>
#   mutate(
#     flag = rp_relevant_direction>=3
#   )

df_indicators_flagged |>
  filter(
    parameter == "mam_mixed_seas_observed"
  )
df_indicators_flagged |>
  filter(is.na(pub_mo_label
               ))



# get validation set flagged w/ RP breaches
df_valid_flag <-
  df_indicators_flagged |>
  filter(
    # May ASI has been used as our validation data set
    month(pub_mo_date) ==6 &
    str_detect(parameter,"asi")
  ) |>
  rename(
    valid_flag = flag
  ) |>
  select(
   yr_season,adm1_name,valid_flag
  )

df_valid_flag |>
  arrange(
    adm1_name,yr_season
  ) |>

  print(n=100)
# df_indicators_flagged |>
#   filter(
#     str_detect(parameter,"^mam")
#   ) |>
#   left_join(
#     df_valid_flag,
#     by = c("yr_season","adm1_name")
#   ) |>
#   glimpse()

df_env_compare <- df_indicators_flagged |>
  left_join(
    df_valid_flag,
    by = c("yr_season","adm1_name")
  )
  # filter_to_validation_range(df_valid = df_validation_set)

df_env_model <-
  df_env_compare |>
    select(
    date,
    yr_season,
    pub_mo_date,
    pub_mo_label,
    adm1_name,
    parameter,
    value
    ) |>
  filter(
    !parameter %in% c("NDSI_Snow_Cover_min","NDSI_Snow_Cover_max","era5_land_runoff_max"),
    !str_detect(parameter,"era5_land_volumetric_soil_water_layer_\\d"),

    # already have these from ERA land up to 2024 rather than 2020
    !(parameter %in% c("total_precipitation","mean_2m_air_temperature"))

  )




df_perf_metrics <- df_env_compare |>
  mutate(
    TP = flag & valid_flag,
    TN = !flag & !valid_flag,
    FP = flag & !valid_flag,
    FN = !flag & valid_flag
  ) |>
  group_by(
    adm1_name,
    pub_mo_label =month(pub_mo_date,label=T,abbr=T),
    parameter
  ) |>
  summarise(
    precision = sum(TP)/(sum(TP)+sum(FP)),
    recall = sum(TP)/(sum(TP)+sum(FN)),
    accuracy = (sum(TP)+sum(TN))/(sum(TP)+sum(TN)+sum(FP)+sum(FN)),
    .groups="drop_last"
  ) |>
  mutate(
    f1 = (2 * precision * recall) / (precision + recall),
    # when precision & recall are 0 we get NaN - replace w/ 0 for easier interpretation
    f1 = ifelse(precision==0&recall==0,0,f1),
    rank_correct= dense_rank(accuracy)
  ) |>
  label_parameters()
  #   mutate(
  #   parameter_simplified = case_when(
  #     # str_detect(parameter, "era5_land_volumetric_soil")~ "Soil Moisture (ERA5)",
  #     str_detect(parameter,"NDSI")~"NDSI",
  #     str_detect(parameter,"asi")~"ASI",
  #     str_detect(parameter,"vhi")~"VHI",
  #
  #     str_detect(parameter,"cumu_chirps_precipitation_sum")~"Precip cumu (CHIRPS) ",
  #     str_detect(parameter,"chirps_precipitation_sum")~"Precip (CHIRPS)",
  #     str_detect(parameter,"cumu_era5_land_total_precipitation_sum")~"Precip cumu (ERA)",
  #     str_detect(parameter,"era5_land_total_precipitation_sum")~"Precip (ERA)",
  #     str_detect(parameter,"era5_land_temperature_2m")~"Temp (ERA)",
  #     str_detect(parameter,"era5_land_snow_depth_water_equivalent")~"SDWE (ERA5)",
  #     str_detect(parameter,"era5_land_snow_cover")~"Snow Cover (ERA5)",
  #     str_detect(parameter,"era5_land_snowmelt_sum")~"Snow Melt (ERA5)",
  #     str_detect(parameter,"cumu_era5_land_temperature_2m")~"Temp cumu (ERA5)",
  #
  #     str_detect(parameter,"runoff_max")~"Runoff max (ERA5)",
  #     str_detect(parameter,"runoff_sum")~"Runoff sum (ERA5)",
  #     str_detect(parameter,"SWE_inst")~"SWE (FLDAS)",
  #     .default = parameter
  #   )
  # ) |>
  # ungroup()

```

```{r}
aoi_adm1 <- set_names(aoi_adm1,aoi_adm1)

p_metrics_seasonal <-
  aoi_adm1 |>
  map(\(adm_tmp){

    df_perf_metrics |>
      ungroup() |>
      filter(
        adm1_name == adm_tmp
      ) |>
      mutate(
        trigger_type = factor(case_when(
          pub_mo_label %in% c("Jan","Feb","Mar")~"Pre-Season",
          pub_mo_label %in% c("Mar","Apr","May")~"Mid-Season",
          pub_mo_label %in% c("Jun","Jul")~"Post-Season"
        ), levels = c("Pre-Season","Mid-Season","Post-Season")
        )
      ) |>
      pivot_longer(cols = precision:accuracy) |>
      filter(pub_mo_label %in% c("Jan","Feb","Mar","Apr","May","Jun","Jul")) |>
      ggplot(
        aes(
          y = reorder(parameter,value),
          x= value,
          color = name
        )
      )+
      geom_point_interactive(
        aes(tooltip= glue(
          "parameter: {parameter},
      metric: {name}
      value: {scales::label_percent(accuracy = 1)(value)}")
        ),alpha=0.4
      )+
      facet_nested(
        rows=vars(trigger_type, pub_mo_label),
        # nest_line = element_line(colour = "red"),
        scales="free")+

      scale_x_continuous(labels =scales::label_percent())+
      scale_y_discrete(expand= c(.05,.05))+
      labs(
        title =  "How well do RS parameters (thresholded - 5 year RP) predict cumulative May ASI breaching 5 year RP",
        subtitle =glue("{adm_tmp} Province")

      )+
      theme(
        # strip.text = element_text(angle=90),
        ggh4x.axis.nestline = element_line(linetype = 2),
        panel.border = element_rect(fill=NA, color ="grey"),
        legend.title = element_blank(),
        axis.text.y= element_text(size=6),
        axis.title.x= element_blank(),
        axis.title.y= element_blank(),
        plot.title = element_text(size =9),
        plot.subtitle = element_text(size =8),strip.background = element_rect(fill="lightgrey")
      )
  }
  )
```

```{r}
aoi_adm1 <- set_names(aoi_adm1,aoi_adm1)

lp_tile_metrics_seasonal <-
  aoi_adm1 |>
  map(\(adm_tmp){

    df_temp <- df_perf_metrics |>
      ungroup() |>
      filter(
        adm1_name == adm_tmp
      ) |>
      mutate(
        trigger_type = factor(case_when(
          pub_mo_label %in% c("Jan","Feb","Mar")~"Pre-Season",
          pub_mo_label %in% c("Mar","Apr","May")~"Mid-Season",
          pub_mo_label %in% c("Jun","Jul")~"Post-Season"
        ), levels = c("Pre-Season","Mid-Season","Post-Season")
        )
      ) |>
      filter(pub_mo_label %in% c("Jan","Feb","Mar","Apr","May","Jun","Jul"))

    df_temp |>
      ggplot(
        aes(
          x= pub_mo_label,
          y = parameter,
          fill = f1
        )
      )+
      geom_tile_interactive(
        aes(tooltip= glue(
          "parameter: {parameter},
      metric: {f1}
      value: {scales::label_percent(accuracy = 1)(f1)}")
        ),alpha=1
      )+
        geom_tile(
    data = df_temp|>
      filter(f1>=0.7),
      # group_by(pub_mo_label) |>
      # slice_max(
      #   f1, n= 3
      # ),
      fill = NA, color = "red", linewidth = 1
  )+
      labs(
        title =  "How well do RS parameters (thresholded - 5 year RP) predict cumulative May ASI breaching 5 year RP",
        subtitle =glue("{adm_tmp} Province")

      )+
      theme(
        # strip.text = element_text(angle=90),
        # ggh4x.axis.nestline = element_line(linetype = 2),
        panel.border = element_rect(fill=NA, color ="grey"),
        legend.title = element_blank(),
        axis.text.y= element_text(size=6),
        axis.title.x= element_blank(),
        axis.title.y= element_blank(),
        plot.title = element_text(size =9),
        plot.subtitle = element_text(size =8),
        strip.background = element_rect(fill="lightgrey")
      )
  }
  )
```

## Indicator Performance by Trigger/Framework Stage

-   Below the we look at measured indicators performance. How well does a 5 year RP or greater event measured across each indicator perform in predicting a 5 year RP ASI drought level as measured at the end of March.
    -   The indicators are broken up into 3 major categories (`pre-season`, `mid-season`, `post-season`), based on when each indicator/trigger moment will become available. Note the months represented in the strips on right represent the month the data will be available. Therefore, they are typically put as 1 month after the date the indicator is monitoring. For example NDVI for March will be fully available in April. This is true for all indicators except for the seasonal forecast (`seas5`) where a forecast for the current month is provided at the start of the month the data is published (5th of month)

**Quick Initial Takeaways:**

-   All indicators pre-season indicators perform weakly in January across all admin units

-   `SEAS5` (seasonal forecast) is the best pre-season indicator that we have the earliest in `Feb` in most provinces

-   More indicators become better predictors in March (labelled as pre-season, but not really sufficient leadtime for agricultural activities and operational leadtimes received).

-   In March SEAS5 prediction for MAM is still the most predictive preciptiation indicator we have.

-   By March/April, soil moisture looks very promising as well as other combinations with snow indicators and precipitation

-   From April onwards observed precipitation becomes more predictive. With CHIRPS leading over ERA5 by a usually a minor except in Bagdhis where ERA5 is much more performant.

### Interpreting plots:

Below the performance metrics are given for each parameter and admin unit. The following metrics are calculated:

-   Accuracy
-   Precision
-   Recall

As we are predicting relatively rare events the accuracy metric should be supported by interpretation of precision and recall.

Below we show all trigger moment/months and there `f1 score` (harmonic mean of precision and recall) for predicting end of season ASI (dekad 3 may).

```{r}
gdf_adm1 <- cumulus::download_fieldmaps_sf(iso3= "afg",layer= "afg_adm1")

df_pin <- cumulus::blob_read(
  name= "ds-aa-afg-drought/raw/vector/HNRP_2025_PiN_Targets_Severity.xlsx",
  container = "projects"
)

df_pin_wts <- df_pin |>
  clean_names() |>
  filter(province %in% aoi_adm1) |>
  group_by(province) |>
  summarise(
    fsc_pin_wt = sum(pin_fsc)
  ) |>
  rename(
    adm1_name = "province"
  )

df_area_wt_table <- gdf_adm1$afg_adm1 |>
  clean_names() |>
  filter(adm1_en %in% aoi_adm1) %>%
  mutate(
    area_wt = as.numeric(st_area(.))
  ) |>
  st_drop_geometry() |>
  select(adm1_name = adm1_en,adm1_pcode,area_wt) |>
  left_join(
    df_pin_wts
  ) |>
  mutate(
    area_x_fsc_wt =area_wt * fsc_pin_wt
  )


generalize_f1 <- function(df, aoi, weight=NULL){
  df_agg <- df |>
    filter(
      adm1_name %in% aoi
    ) |>
    group_by(
      pub_mo_label, parameter,parameter_simplified
    )
  if(is.null(weight)){
    ret <-  df_agg |>
    summarise(
      across(
        .cols = c("f1","precision","recall"), \(x) mean(x,na.rm=T)
      ),
      .groups="drop"
      # f1 = mean(f1, na.rm = TRUE),
      # precision = mean(precision, na.rm = TRUE),
      # recall = mean(precision, na.rm = TRUE),.groups="drop"
    )
  }
  if(!is.null(weight)){
    ret <- df_agg |>
      summarise(
        across(
         .cols = c("f1","precision","recall"), \(x) weighted.mean(x,,w =!!sym(weight),na.rm=T)
        ),

         .groups="drop"
        # f1 = weighted.mean(f1,w=!!sym(weight),na.rm=T),
      )
  }
  ret
}

wt_set <- list(NO_WT = NULL, AREA_WT = "area_wt", AREA_FSC_PIN_WT = "area_x_fsc_wt")
df_perf_metrics_w_wt <- df_perf_metrics |>
  left_join(df_area_wt_table)

df_perf_metrics_w_wt |> count(parameter) |> print(n=23)

df_perf_metrics_w_wt_filt <- df_perf_metrics_w_wt |>
        filter(
          !parameter %in% c("NDSI_Snow_Cover_min",
                            "NDSI_Snow_Cover_max",
                            "era5_land_runoff_max"),
          !str_detect(parameter,"era5_land_volumetric_soil_water_layer_\\d")
        )

perf_param <- c("precision","recall","f1")[3]

lp_f1_combined <- imap(
  wt_set,
  \(wt_temp,nmt){
    dft <- generalize_f1(
      df= df_perf_metrics_w_wt_filt,
      aoi =  c("Takhar","Sar-e-Pul","Faryab"),
      weight=wt_temp
    )
    dft_filt <-  dft |>
      filter(
        pub_mo_label %in% c("Feb","Mar","Apr","May","Jun")
      ) |>
      mutate(
        f1_gte_0.5 = !!sym(perf_param)>=0.5
      )

    subtitle_tmp <- switch(nmt,
            "NO_WT"= "Unweighted",
            "AREA_WT"= "Weighted by province area",
            "AREA_FSC_PIN_WT"= "Weighted by province area & FSC PiN"
    )

    dft_filt |>
      ggplot(
        aes(
          x= pub_mo_label,
          y = parameter_simplified,
          fill = !!sym(perf_param)
        )
      )+
      geom_tile_interactive(
        aes(tooltip= glue(
          "parameter: {parameter},
      F1 score: {scales::label_percent(accuracy = 1)(f1)}"
      )
        ),alpha=1
      )+
      labs(
        title =  subtitle_tmp

      )+
      geom_tile(
        data = dft_filt |>
          group_by(pub_mo_label) |>
          slice_max(
            !!sym(perf_param),
            n= 5
          ),
        aes(color = f1_gte_0.5),
        fill = NA, show.legend=F,
        # color = "red",
        linewidth = 1
      )+
      scale_fill_viridis_c()+
      scale_color_manual(
        values = c(
          "TRUE"= hdx_hex("tomato-hdx"),
          "FALSE"="grey"
          )
      )+
      theme(
        # ggh4x.axis.nestline = element_line(linetype = 2),
        panel.border = element_rect(fill=NA, color ="grey"),
        legend.title = element_blank(),
        axis.text.y= element_text(size=10),
        axis.title.x= element_blank(),
        axis.title.y= element_blank(),

        strip.background = element_rect(fill="lightgrey")
      )

  }

)
lp_f1_combined$AREA_WT
lp_f1_combined$NO_WT


ldf_f1_combined <- imap(
  wt_set,
  \(wt_temp,nmt){
     wt_label <- switch(nmt,
            "NO_WT"= "Unweighted",
            "AREA_WT"= "Weighted by province area",
            "AREA_FSC_PIN_WT"= "Weighted by province area & FSC PiN"
    )
    dft <- generalize_f1(
      df= df_perf_metrics_w_wt |>
        filter(
          !parameter %in% c("NDSI_Snow_Cover_min","NDSI_Snow_Cover_max"),
          !str_detect(parameter,"era5_land_volumetric_soil_water_layer_\\d")
        ),
      aoi =  c("Takhar","Sar-e-Pul","Faryab"),
      weight=wt_temp
    )
    dft |>
      filter(
        pub_mo_label %in% c("Feb","Mar","Apr","May","Jun")
      ) |>
      mutate(
        f1_gte_0.5 = f1>=0.4,
        weight_type = wt_label
      )
  }) |>
  list_rbind()
ldf_f1_combined

lp_ndsi_params <- map(
  wt_set,
  \(wt_temp){
    dft <- generalize_f1(
      df= df_perf_metrics_w_wt |>
        filter(
          parameter %in% c("NDSI_Snow_Cover_min","NDSI_Snow_Cover_mean","NDSI_Snow_Cover_max")
        ),
      aoi =  c("Takhar","Sar-e-Pul","Faryab"),
      weight=wt_temp
    )
    dft_filt <-  dft |>
      filter(
        pub_mo_label %in% c("Feb","Mar","Apr","May","Jun")
      ) |>
      mutate(
        f1_gte_0.5 = f1>=0.4
      )

    dft_filt |>
      ggplot(
        aes(
          x= parameter,
          y = f1
        )
      )+
      geom_point()+
      coord_flip()+
      facet_wrap(~pub_mo_label)+
      theme(
        # strip.text = element_text(angle=90),
        ggh4x.axis.nestline = element_line(linetype = 2),
        panel.border = element_rect(fill=NA, color ="grey"),
        legend.title = element_blank(),
        axis.text.y= element_text(size=10),
        axis.title.x= element_blank(),
        axis.title.y= element_blank(),
        # plot.title = element_text(size =9),
        # plot.subtitle = element_text(size =8),
        strip.background = element_rect(fill="lightgrey")
      )

  }

)

lp_ndsi_params$NO_WT
library(patchwork)
lp_f1_combined$NO_WT +
  lp_f1_combined$AREA_WT +
  lp_f1_combined$AREA_FSC_PIN_WT + plot_layout(nrow = 1)+
  plot_annotation(title= "Average F1 Score Across Provinces")

girafe(ggobj =lp_f1_combined$AREA_FSC_PIN_WT)

```

```{r}
#| fig.height: 9

lp_tile_metrics_seasonal$`Sar-e-Pul`
```

```{r}
#| fig.height: 9

lp_tile_metrics_seasonal$Takhar
```

```{r}
#| fig.height: 9

lp_tile_metrics_seasonal$Faryab
```

```{r}
#| eval: false
#| fig.height: 9

# no longer in AOI
# lp_tile_metrics_seasonal$Badakhshan
```

```{r}
girafe(ggobj= p_metrics_seasonal$Faryab)
```

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$`Sar-e-Pul`)
```

```{r}
#| fig.height: 9

girafe(ggobj= p_metrics_seasonal$Takhar)
```

```{r}
lp_metric <-
  aoi_adm1 |>
  map(\(adm_tmp){

    df_perf_metrics |>
      filter(adm1_name == adm_tmp) |>
      pivot_longer(cols = precision:accuracy
      ) |>
      ggplot(
        aes(
          x=reorder(parameter,value),
          y= value,
          color = name)
      )+
      geom_point_interactive(
        aes(tooltip= glue(
          "parameter: {parameter},
      metric: {name}
      value: {scales::label_percent(accuracy = 1)(value)}")
        ),alpha=0.4
      )+
      coord_flip()+
      scale_y_continuous(labels =scales::label_percent())+
      labs(
        title =  "How well do RS parameters (thresholded - 5 year RP) predict cumulative May ASI breaching 5 year RP",
        subtitle =glue("{adm_tmp} Province")

      )+
      theme(
        legend.title = element_blank(),
        axis.text.y= element_text(size=6),
        axis.title.x= element_blank(),
        axis.title.y= element_blank(),
        plot.title = element_text(size =9),
        plot.subtitle = element_text(size =8)
      )
  }
  )


girafe(ggobj = lp_metric$Takhar)
```

Here we can see how closer to the end of season our performance metrics improve.

```{r}

df_metrics_simple <- df_perf_metrics |>
  filter(adm1_name!="Badghis",adm1_name!="Badakhshan") |>
    filter(
          pub_mo_label %in% c("Feb","Mar","Apr","May","Jun"),
          !str_detect(parameter,"runoff_max"),

           !parameter %in% c("NDSI_Snow_Cover_min","NDSI_Snow_Cover_max","total_precipitation"),
          !str_detect(parameter,"era5_land_volumetric_soil_water_layer_\\d")
        ) |>
  # filter(!is.nan(f1)) |>
  label_parameters()





df_metrics_filt <-  df_metrics_simple |>
        filter(
          pub_mo_label %in% c("Feb","Mar","Apr","May","Jun"),
          !str_detect(parameter,"runoff_max"),

           !parameter %in% c("NDSI_Snow_Cover_min","NDSI_Snow_Cover_max","total_precipitation"),
          !str_detect(parameter,"era5_land_volumetric_soil_water_layer_\\d")
        )

df_top_metrics_label <- df_metrics_filt |>
  mutate(
    f1_lgl = f1>0.5
  ) |>
  group_by(adm1_name, pub_mo_label) |>
  mutate(
    num_gte = sum(f1_lgl)
  ) |>
  arrange(
   adm1_name, pub_mo_label, desc(f1)
  ) |>
  mutate(
    include = row_number()
  ) |>
  print(n=25) |>
  filter(include%in% c(1:3) & f1_lgl) |>
  ungroup()

df_top_metrics_label |>
  filter(adm1_name == "Sar-e-Pul")

df_metrics_top3 <- df_metrics_filt |>
        group_by(adm1_name, pub_mo_label) |>
        slice_max(f1, n= 3, with_ties = T)


viridis_colors <- viridisLite::viridis(15, option = "A")
length(c25)
c25 <- c(

  "green4",
  "#E31A1C",
  "dodgerblue2",
  "#6A3D9A", # ndsi purple
  "#FF7F00", # orange
  "skyblue2",
  "gold1",
  "#FB9A99", # lt pink
  "palegreen2",
  "#CAB2D6", # lt purple
  "#FDBF6F", # lt orange
  "gray70",
  "khaki2",
  "maroon",
  "orchid1",
  "deeppink1",
  "blue1", # soil mositure
  "steelblue4",
  "darkturquoise", "green1", "yellow4", "yellow3",
  "darkorange4", "brown"
)





p_ts_f1 <- df_metrics_top3 |>
  ggplot(
    aes(
      x= pub_mo_label, y= f1
    )
  )+
  geom_point(
    data = df_metrics_filt,
    alpha=0.5, color = "darkgrey"
  )+
  geom_point(
    aes(color =parameter_simplified)
  )+
  geom_label_repel(
    data = df_metrics_top3,
    aes(
      label = parameter_simplified,
      fill = parameter_simplified
    ),
    max.overlaps = 20,
    color = "black"
    )+
  # scale_fill_brewer(palette = "Set3")+
  scale_fill_manual(values = c25) +
  labs(
    # title = "F1 Scores: How well do indicators predict worst end of season ASI values",
    title = "F1 Scores: By Province & Trigger Moment",
    subtitle = "Only Top indicators labelled"
  )+
  scale_color_manual(values = c25) +
  facet_wrap(~adm1_name)+
  theme(
    panel.grid.major.x = element_line(color = "black"),
    legend.position = "none"

  )

# whta if we just show values > 0.5
# p_ts_f1_gte0.5 <- df_metrics_filt |>
#    filter(
#           !parameter %in% c("NDSI_Snow_Cover_min","NDSI_Snow_Cover_max"),
#           !str_detect(parameter,"era5_land_volumetric_soil_water_layer_\\d")
#         ) |>
#   filter(f1>=0.5) |>
#   filter(
#     adm1_name != "Badkhshan"
#   # ) |>



ggplot(
  df_metrics_filt |>
    filter(
    parameter!="mam_mixed_seas_observed"
  ),
  aes(
    x= pub_mo_label, y= f1
  )
)+
  geom_point(
    alpha=0.5,
    color = "darkgrey"
  )+

  geom_point(
    data= df_top_metrics_label |>
      filter(parameter!="mam_mixed_seas_observed"),
    aes(color =parameter_label)
  )+
  geom_label_repel(
    data =  df_top_metrics_label |> filter(parameter != "mam_mixed_seas_observed") ,
    aes(
      label = parameter_label,
      fill = parameter_label
    ),
    alpha=0.5,
    max.overlaps = 20,
    color = "black"
    )+
  # scale_fill_brewer(palette = "Set3")+
  scale_fill_manual(values = c25) +
  scale_color_manual(values = c25)+
  labs(
    x = "Activation moment/ publication month",
    title = "Predictiveness of Indicators by Province and Trigger Timing (F1 Score)",
    subtitle = "Only Top 3 Indicators Labelled Per Publication Month and Province"
  )+
  facet_wrap(~adm1_name,ncol=1)+
  theme(
    panel.grid.major.x = element_line(color = "black"),
    legend.position = "none"

  )
ggplot(
  df_metrics_filt,
  aes(
    x= pub_mo_label, y= f1
  )
)+
  geom_point(
    alpha=0.5,
    color = "darkgrey"
  )+

  geom_point(
    data= df_top_metrics_label,
    aes(color =parameter_label)
  )+
  geom_label_repel(
    data =  df_top_metrics_label ,
    aes(
      label = parameter_label,
      fill = parameter_label
    ),
    alpha=0.5,
    max.overlaps = 20,
    color = "black"
    )+
  # scale_fill_brewer(palette = "Set3")+
  scale_fill_manual(values = c25) +
  scale_color_manual(values = c25)+
  labs(
    x = "Activation moment/ publication month",
    title = "Predictiveness of Indicators by Province and Trigger Timing (F1 Score)",
    subtitle = "Only Top 3 Indicators Labelled Per Publication Month and Province"
  )+
  facet_wrap(~adm1_name,ncol=1)+
  theme(
    panel.grid.major.x = element_line(color = "black"),
    legend.position = "none"

  )

p_ts_f1_gte0.5
library(patchwork)
# box::use(patchwork[...])

p_ts_f1 +
  p_perf_tile_combined+

  plot_layout(widths = c(2,1))+
  plot_annotation(
    title = "How well do RS indicators predict worst end of season ASI values?"
  )
```

## Suggested Next Steps:

## Appendix

one off snow checks

```{r}
#| eval: false


# quick gut check on era5 snow fall - can add to appendix during cleanup
df_era_snow <- df_environmental_yr_adj |>
  filter(
    yr_season >= df_validation_range[1],
    yr_season <= df_validation_range[2],
    adm1_name %in% aoi_adm1
  ) |>
  # this group_by() -> filter() step is just to grab the last dekad per month
  # for ASI & VHI, the rest of the data is monthly time-step so it has no
  # effect on them
  group_by(
    adm1_name, parameter, pub_mo_date
  ) |>
  filter(
    date == max(date)
  ) |>
  ungroup() |>
  filter(
    # FEB ERA SNOW
    month(pub_mo_date)==2
    # regex to detect snow_cover or snow melt
    &str_detect(parameter, "era.*snow(_cover|melt_sum)")|
      # ASI
      (str_detect(parameter,"asi")& month(pub_mo_date)==6)
  )

df_era_snow_wide <- df_era_snow |>
  pivot_wider(
    id_cols =c(yr_date, adm1_name),
    names_from = parameter,
    values_from = value
  )


df_era_snow_wide |>
  group_by(
    adm1_name
  ) |>
  summarise(
    cor(asi,era5_land_snow_cover)
  )

# snow melt correlations are negative... so feb pub (jan data) does negatively correlate to ASI
# more Jan snow melt less agg stress... could look more into ERA5 snowmelt var, but strange
df_era_snow_wide |>
  group_by(
    adm1_name
  ) |>
  summarise(
    cor(asi,era5_land_snowmelt_sum)
  )
df_env_filt_flag |> count(parameter) |> print(n=23)

df_era5_land_rps_wide <- df_env_filt_flag |>
  filter(
    # (month(pub_mo_date)==2 & str_detect(parameter, "era.*snow(_cover|melt_sum)"))
    (month(pub_mo_date)==2 & str_detect(parameter, "^era5_land"))|
      # ASI
      (str_detect(parameter,"asi")& month(pub_mo_date)==6)
  ) |>
   pivot_wider(
    id_cols =c(yr_date, adm1_name),
    names_from = parameter,
    values_from = rp_relevant_direction
  )

df_era5_land_rps_wide |>
ggplot(
    aes(x= era5_land_snow_cover, y= asi)
  )+
  geom_point()



thresh <- 5
df_era5_land_rps_wide |>
  filter(adm1_name %in% c("Takhar","Faryab","Sar-e-Pul")) |>
  mutate(
    perf_class = case_when(
      era5_land_surface_runoff_sum>=thresh & asi>=thresh~"TP",
      era5_land_surface_runoff_sum>=thresh & asi<thresh~"FP",
      era5_land_surface_runoff_sum<=thresh & asi>thresh~"FN",
      era5_land_surface_runoff_sum<=thresh & asi<=thresh~"TN"
    )
  ) |>
  glimpse() |>
  ggplot(
    aes(x= era5_land_surface_runoff_sum, y= asi, color = perf_class)
  )+
  geom_point()+
  scale_color_manual(
    values= c("TP"= hdx_hex("mint-hdx"),
              "TN"= hdx_hex("mint-light"),
              "FN"= hdx_hex("tomato-hdx"),
              "FP"=hdx_hex("tomato-light") )
  )+
  geom_vline(xintercept=thresh)+
  geom_hline(yintercept = thresh)+
  scale_x_log10()+
  scale_y_log10()+
  facet_wrap(~adm1_name)+
  theme(
    panel.border = element_rect(color="grey",fill=NA)
  )+
  labs(
    title= "Performance: Feb ERA5 Surface Runoff Sum Predicting End of Seasson ASI",
    caption = "High return periods runoff corresponds to deficit of runoff where as high RP ASI corresponds to higher vegetative stress (end of May)"
    )


# df_era_snow_esa |>
#   ggplot(aes(x= )
```

```{r}
#| eval: false

# dont really like where this plot was going -- probably delete
df_metrics_simple |>
  filter(
    pub_mo_label %in% c("Feb","Mar","Apr","May"),
  ) |>
  group_by(adm1_name, pub_mo_label) |>
  slice_max(f1, n= 3, with_ties = T) |>
  ggplot(
    aes(
      x= parameter_label,
      y= adm1_name,
      fill = f1
    )
  )+
  # scale_x_discrete(limits = c("Feb","Ma
  geom_tile() +
  facet_grid(
    cols = vars(pub_mo_label),scales="free"
    )+
  theme(
    axis.text.x = element_text(angle =90),
    panel.border = element_rect(fill = NA, color = "grey")
  )

```

### Point System

Point system - you need 4 points

Feb: SEAS5 : 4 points Mar: - Observational Rainfall (CHIRPS): 2 points - Observed Soil Moisture : 2 points - NDSI or SWE: 2 points April: - Observed Rainfall CHIRPS OR ERA5: 4 points - NDSI: 2 points - SWE: 2 points May: - ASI: 4 points - VHI: 2 points - Soil Moisture: 2 points

Jun: - ASI: 4 - VHI: 2 - Soil Moisture 2

```{r}

df_ps <- df_env_compare |>
  label_parameters() |>
  mutate(
    ps = case_when(
      str_detect(parameter,"NDSI|SWE") & pub_mo_label == "Mar"~"SNOW_COMBINED",
      str_detect(parameter,"era5_land_volumetric_soil")~"soil_moisture",
      str_detect(parameter,"NDSI") & pub_mo_label != "Mar"~"NDSI",
      # str_detect(ps,"chirps_cumu|era5_cumu_precip") ~"observational_chirps_era5",
      str_detect(parameter,"cumu_chirps|cumu_era5_land_total_precipitation") ~"cumu_observational_chirps_era5",
      .default = parameter
    )
  )




df_rps_composite <- df_ps |>
  group_by(
    pub_mo_label, yr_season,adm1_name,ps
  ) |>
  slice_max(
    rp_relevant_direction,n=1,with_ties = F
  ) |>

  summarise(
    rp = max(rp_relevant_direction,na.rm=T),
    # rp_flag = rp>=5,
  ) |>
  mutate(
      rp_flag = case_when(
      ps == "SEAS5-MAM" ~ rp >=5,
      ps == "soil_moisture" ~ rp>=10,
      ps == "SNOW_COMBINED" ~ rp>=10,
      ps == "NDSI" ~ rp>=10,
      ps == "cumu_observational_chirps_era5"~ rp>=3,
      ps == "asi"~ rp>=5,
      ps == "vhi"~ rp>=5,
      .default = NA_real_
    )
  ) |>
  ungroup()


df_pts_added  |>
  filter(pub_mo_label == "Mar") |>
  print(n=30)

df_pts_added <- df_rps_composite |>
  filter(pub_mo_label!="Jan") |>
  mutate(
    pts1 = case_when(

      # Feb - Just SEAS5
      pub_mo_label == "Feb" & ps=="SEAS5-MAM" & rp_flag~4,
      pub_mo_label == "Feb" & ps=="SEAS5-MAM" & !rp_flag~0,

      # March - soil moisture, snow, rainfall
      pub_mo_label == "Mar" & ps=="soil_moisture" & rp_flag~2,
      pub_mo_label == "Mar" & ps=="soil_moisture" & !rp_flag~0,
      pub_mo_label == "Mar" &  ps=="SNOW_COMBINED" & rp_flag~2,
      pub_mo_label == "Mar" &  ps=="SNOW_COMBINED" & !rp_flag~0,
      pub_mo_label == "Mar" &  ps=="cumu_observational_chirps_era5" & rp_flag~2,
      pub_mo_label == "Mar" &  ps=="cumu_observational_chirps_era5" & !rp_flag~0,

      # april Snow/ rainfall
      pub_mo_label == "Apr" & ps == "NDSI" & rp_flag~2,
      pub_mo_label == "Apr" & ps == "NDSI" & !rp_flag~0,
      pub_mo_label == "Apr" & ps == "SWE_inst" & rp_flag~2,
      pub_mo_label == "Apr" & ps == "SWE_inst" & !rp_flag~0,
      pub_mo_label == "Apr" & ps=="cumu_observational_chirps_era5" & rp_flag~4,
      pub_mo_label == "Apr" & ps=="cumu_observational_chirps_era5" & !rp_flag~0,

      # May
      pub_mo_label == "May" & ps == "asi" & rp_flag~4,
      pub_mo_label == "May" & ps == "asi" & !rp_flag~0,
      pub_mo_label == "May" & ps == "vhi" & rp_flag~2,
      pub_mo_label == "May" & ps == "vhi" & !rp_flag~0,
      pub_mo_label=="May" & ps == "soil_moisture" & rp_flag ~ 2,
      pub_mo_label=="May" & ps == "soil_moisture" & !rp_flag ~ 0,


      # june = ASI, VHI, soil moisture
      pub_mo_label == "Jun" & ps == "asi" & rp_flag~4,
      pub_mo_label == "Jun" & ps == "asi" & !rp_flag~0,
      pub_mo_label == "Jun" & ps == "vhi" & rp_flag~2,
      pub_mo_label == "Jun" & ps == "vhi" & !rp_flag~0,
      pub_mo_label=="Jun" & ps == "soil_moisture" & rp_flag ~ 2,
      pub_mo_label=="Jun" & ps == "soil_moisture" & !rp_flag ~ 0,
      # ps %in% ps_considered ~0,
      .default = NA)
    )






df_pts_added  |>
  filter(pub_mo_label %in% c("Feb","Mar","Apr","May","Jun")) |>
  group_by(pub_mo_label,adm1_name,yr_season ) |>
  summarise(
    pts1 = sum(pts1,na.rm=T),
    pts_flag = pts1>=4,.groups="drop_last"
  ) |>
  # count(pts1)
  summarise(
    ar = mean(pts_flag),
    rp = 1/ar
  ) |>
  print(
    n =25
  )

df_pts_added  |>
  filter(adm1_name!="Badghis") |>
  filter(pub_mo_label %in% c("Feb",
                       "Mar",
                       "Apr",
                       # "May",
                       "Jun"
                       )) |>
  group_by(pub_mo_label,yr_season,adm1_name ) |>
  summarise(
    pts1 = sum(pts1,na.rm=T),
    pts_flag = pts1>=4,.groups="drop_last"
  ) |>
  group_by(
    pub_mo_label,yr_season
  ) |>
  summarise(
    pts_flag = any(pts_flag)
  ) |>
  group_by(pub_mo_label) |>
  # count(pts1)
  summarise(
    ar = mean(pts_flag),
    rp = 1/ar
  ) |>
  print(
    n =25
  )

df_pts_added  |>
  filter(!adm1_name %in% c("Badghis","Badakhshan")) |>
  filter(pub_mo_label %in%
           c(
             # "Feb",
             # "Mar",
             # "Apr",
             "May",
             "Jun"
           )) |>
  group_by(pub_mo_label,yr_season,adm1_name ) |>
  summarise(
    pts1 = sum(pts1,na.rm=T),
    pts_flag = pts1>=4,.groups="drop_last"
  ) |>
  group_by(
    pub_mo_label,yr_season
  ) |>
  summarise(
    pts_flag = any(pts_flag)
  ) |>
  group_by(yr_season) |>
  summarise(
    pts_flag = any(pts_flag)
  ) |>
  # count(pts1)
  summarise(
    ar = mean(pts_flag),
    rp = 1/ar
  ) |>
  print(
    n =25
  )


df_pts_monitoring_historical <- df_pts_added  |>
  filter(
    pub_mo_label %in% c("Feb","Mar","Apr","May","Jun"), !is.na(pts1)
  )



df_pts_w_activation <- df_pts_monitoring_historical |>
   group_by(
    pub_mo_label, yr_season,adm1_name
  ) |>
  mutate(
    activate = sum(pts1)>=4,
    activate_color = ifelse(activate&pts1>0,"yes","no")
  )

mos_monitoring <- list(
  "Feb"= "Feb",
  "Mar"= "Mar",
  "Apr" = "Apr",
  # "May" = "May",
  "Jun" = "Jun"
)


lp_observational_tile <- map(
  mos_monitoring,
  \(mo_tmp){
  df_pts_w_activation |>
      filter(adm1_name!="Badghis",
             pub_mo_label==mo_tmp) |>
  ggplot(
    aes(x= yr_season,
        y= ps ,
        fill = pts1,
        color = activate_color)
  )+
  geom_tile( linewidth = 1)+
  scale_color_manual(
    values = c(
      "yes" = "red",
      "no"= NULL
    )
  )+
  scale_fill_gradient()+
  facet_grid(
    rows = vars(adm1_name),
    scales= "free")
  }
)

lp_observational_tile$Apr
lp_observational_tile$Mar

```

### Runoff

```{r}
# i need to have a little look at this runoff var

df_env_filt |>
  filter(
    str_detect(parameter, "runoff")
  ) |> count(parameter)

df_runoff <- df_env_filt |>
  filter(
    str_detect(parameter, "runoff_max")
    )

df_asi <- df_env_filt |>
  filter(str_detect(parameter, "asi"), pub_mo_label =="Jun") |>
  rename(
    asi = value
  ) |>
  select(
    adm1_name, pub_yr_date, asi,rp_asi = rp_relevant_direction
  )

df_runoff_asi <- df_runoff |>
  filter(
    # pub_mo_label == "Feb",
    adm1_name == "Takhar"
  ) |>
  left_join(
    df_asi, by = c("pub_yr_date","adm1_name")
  ) |>
  group_by(adm1_name, pub_mo_label) |>
  mutate(
    anom_runoff = value - mean(value, na.rm = T),
    anom_asi = asi - mean(asi, na.rm = T)
  ) |>
  select(
    adm1_name, date, pub_mo_date,pub_mo_label, anom_runoff,anom_asi, value, asi,
    rp_runoff = rp_relevant_direction,rp_asi
  )

df_runoff_asi |>
  ggplot(
    aes(x= anom_runoff, y= anom_asi, color = rp_runoff)
  )+
  geom_point_interactive(
    aes(tooltip = glue("date: {date}
                       value:{value}"))
  )+
  scale_color_continuous(trans = scales::log10_trans())+
  facet_wrap(~pub_mo_label, scales= "free")

runoff_rp_threshold <- 3
asi_rp_threshold <-  3
p_runoff_rp_scatter <- df_runoff_asi |>
  mutate(
    rp_class = case_when(
      rp_runoff>=runoff_rp_threshold &
      rp_asi >=asi_rp_threshold ~"TP",
      rp_runoff<runoff_rp_threshold &
      rp_asi <asi_rp_threshold ~"TN",

      rp_runoff>=runoff_rp_threshold &
      rp_asi <asi_rp_threshold ~"FP",

      rp_runoff<runoff_rp_threshold &
      rp_asi >=asi_rp_threshold ~"FN"

    )
  ) |>

  ggplot(
    aes(x= rp_runoff, y= rp_asi, color = rp_class)
  )+
  geom_vline(
    xintercept = runoff_rp_threshold
  )+
  geom_hline(
    yintercept = asi_rp_threshold
  )+
  geom_point_interactive(
    aes(tooltip = glue("date: {date}
                       runoff:{value}
                       asi: {asi}
                       RP ASI: {rp_asi}
                       RP runoff: {rp_runoff}"))
  )+
  # scale_color_continuous(trans = scales::log10_trans())+
  facet_wrap(~pub_mo_label, scales= "free")

girafe(ggobj =p_runoff_rp_scatter)


```
