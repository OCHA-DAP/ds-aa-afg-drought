---
title-block-banner: "#00ad78ff"
title-block-banner-color: "#ffffff"
title: Adhoc Request SEAS5 Outlook All Provinces
subtitle: Current Predictions & Trigger Likelihoods
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    self-contained: true
    embed-resoures: true
    smooth-scroll: true
execute:
  include: true
  echo: true
  warning: false
  message: false
  eval: true
  results: "asis"
  out.width: "100%"
  code-fold: true
editor: visual
project:
  execute-dir: project
---

## Background:

-   Adhoc request from OCHA AFG for SEAS5 outlook for all provinces in AFG for the MAM Season
-   Wanted for HCT meeting w/ relevance to AA frameworks

```{r}

aoi_adm1 <-  c(
  "Takhar",
  "Badakhshan",
  "Faryab",
  "Sar-e-Pul"
)
box::use(
  cumulus,
  lubridate[...],
  dplyr[...],
  gghdx[...],
  seas5 = ../R/seas5_utils,
  ggrepel[...],
  forcats[...],
  gt[...],
  ggplot2[...],
  tidyr[...],
  janitor[...]
         )

gghdx()
```

```{r}

# quick wrangling to create lookup table from admin_lookup.parquet
df_labels <- cumulus$blob_read(
  name = "admin_lookup.parquet",
  stage = "dev",
  container = "polygon"
) |>
  clean_names()

df_adm1_lookup <- df_labels |>
  filter(adm0_name == "Afghanistan") |>
  distinct(adm1_name,adm1_pcode) |>
  filter(!is.na(adm1_name))

```

```{r}
# connect to prod db and grab SEAS forecast of interest
con <- cumulus$pg_con(stage ="prod")

df <- tbl(con, "seas5") |>
  filter(
    iso3 == "AFG",
    adm_level ==1,
    # set up query so Jan/Feb will be included as they become available
    month(issued_date) %in% c(11,12,1,2),
    month(valid_date) %in% c(3:5) # MAM season
  ) |>
  collect() |>
  mutate(
    precipitation = mean * days_in_month(valid_date)
  )
```




```{r}

# aggregate to MAM season
df_agg <- seas5$aggregate_forecast(
  df = df, valid_months = c(3:5),
  by = c("iso3","pcode","issued_date")
  )


df_agg_formatted <- df_agg |>
  # join admin labels
  left_join(df_adm1_lookup, by = c("pcode" = "adm1_pcode")) |>
  group_by(
    iso3,
    pcode,
    pub_mo = month(issued_date, abbr=T),
    leadtime
    ) |>
  # calculate emprical RP values
  arrange(
    mm
  ) |>
  mutate(
    rank = row_number(),
    q_rank = rank/(max(rank)+1),
    rp_emp = 1/q_rank
  ) |>
  group_by(
    iso3,
    pcode
  ) |>
  ungroup() |>
  # grab latest publication
  # create a column that indicates whether admin is in our AOI
  mutate(
    aoi = adm1_name %in% aoi_adm1
  )

df_rps_latest <- df_agg_formatted |>
  group_by(
    iso3,
    pcode
  ) |>
  slice_max(
    issued_date,n=3
  ) |>
    mutate(
      # reorder factors
    pub_date_facet = fct_relevel(
      format(issued_date,"%B %Y"),
      "November 2024",
      "December 2024",
      "January 2025"
    )
    )
```

```{r}
df_rps_latest |>
  # plot
  ggplot(
    aes(x= as_factor(1),y= rp_emp, color = aoi)
  )+
  geom_jitter(position = position_jitter(seed = 1,width = 0.15)) +
  geom_text_repel(aes(label = adm1_name),position = position_jitter(seed = 1, width =0.2))+
  scale_color_manual(
    values = c("TRUE"= hdx_hex("tomato-hdx"), "FALSE"= hdx_hex("sapphire-hdx"))
  )+
  labs(
    title = "SEAS5 Forecast - MAM 2025: predicted rainfall deficit return period",
    subtitle = "By forecast publication date",
    y= "Return Period"
  ) +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "none"
  )+
  facet_wrap(
    ~pub_date_facet
  )
```

actual forecast mm values for AOI

```{r}
df_rps_latest |>
  filter(
    # aoi
  ) |>
   ggplot(
    aes(x= as_factor(1),y= mm, color = aoi)
  )+
  geom_jitter(position = position_jitter(seed = 1,width = 0.15))+
    geom_text_repel(aes(label = adm1_name),position =position_jitter(seed = 1, width =0.2)
                    )+

  # geom_text(aes(label = adm1_name),position = position_jitter(seed = 1, width =0.2))+
  scale_color_manual(
    values = c("TRUE"= hdx_hex("tomato-hdx"), "FALSE"= hdx_hex("sapphire-hdx"))
  )+
  labs(
    title = "SEAS5 Forecast - MAM 2025: predicted rainfall (mm)",
    subtitle = "By forecast publication date",
    y= "Return Period"
  ) +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "none"
  )+
  facet_wrap(
    ~pub_date_facet
  )

```

Some additional plots/tables
```{r}
df_rps_latest |>
  ggplot(
    aes(x= pub_date_facet , y= mm, group = adm1_name, color = aoi)
  )+
  geom_point(alpha=0.3)+
  geom_line()+
   scale_color_manual(
    values = c("TRUE"= hdx_hex("tomato-hdx"), "FALSE"=hdx_hex("sapphire-hdx"))
  )+
  theme(
    legend.position ="none",
    axis.title.x=element_blank()
    )

```

```{r}
df_agg_formatted |>
  mutate(
    pub_mo = fct_relevel(month(issued_date, abbr=T,label=T),"Nov","Dec","Jan","Feb")
  ) |>
  ggplot(
    aes(
      x= pub_mo,
      y= mm, group= pub_mo
    )
  )+
  geom_boxplot() +
  geom_jitter( alpha =0.2)

df_agg_formatted |>
  filter(
    aoi
  ) |>
  mutate(
    pub_mo = fct_relevel(month(issued_date, abbr=T,label=T),"Nov","Dec","Jan","Feb")
  ) |>
  ggplot(
    aes(
      x= pub_mo,
      y= mm,
      group= pub_mo
    )
  )+
  geom_boxplot() +
  geom_jitter( alpha =0.2)+
  facet_wrap(~adm1_name, scales="free")
```


```{r}
df_rps_latest |>
  mutate(
    pub_mo_label = month(issued_date, label = T, abbr= T)
  ) |>
  select(adm1_name,mm, rp_emp,pub_mo_label,aoi) |>
  filter(aoi) |>
  pivot_wider(
    names_from = pub_mo_label, values_from = c("mm","rp_emp")
  ) |>
  ungroup() |>
  select(
    adm1_name,mm_Nov, mm_Dec, mm_Jan,everything()
  ) |>
  gt() |>
  fmt_number(decimals= 1) |>
    cols_merge(
    columns = c("mm_Nov","rp_emp_Nov"), pattern = "{1} ({2})"
  ) |>
  cols_merge(
    columns = c("mm_Dec","rp_emp_Dec"), pattern = "{1} ({2})"
  ) |>
  cols_merge(
    columns = c("mm_Jan","rp_emp_Jan"), pattern = "{1} ({2})"
  ) |>
  cols_label (
    mm_Jan = "Jan",
    mm_Dec = "Dec",
    mm_Nov= "Nov"
  ) |>
  cols_hide(
    columns = c("iso3","pcode","aoi")
  )
```



```{r}
df_rps_latest |>
  filter(
    issued_date =="2025-01-01"
  ) |>
  ggplot(
    aes(x= adm1_name, y= rp_emp, color = aoi, fill = aoi)
  )+
  geom_bar(stat= "identity")+
  theme(
    axis.text = element_text(angle =090),
    axis.title.x = element_blank()
  )
```
